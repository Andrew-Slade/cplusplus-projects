/****************************************
*Programmer: Andrew Slade
*Due: 121/06/17
*TA: Bhaskara Reddy Devarapalli
*ZID: Z1818810
*Section: 340-0003
*header file
*Purpose: Implement a digraph
****************************************/
#include "/home/cs340/progs/17f/p10/wdigraph.h"
/*
push current onto stack
mark as visit
print current
while (stack is not empty)
  current = stack top
  of N neighbors of current, find first that hasnt been visit
    if such neighbor exists
      add to stack
      mark as visit
      print
    if no neighbor exists
      pop from stack
*/
//traverse digraph depth first
void wdigraph::depth_first(int u)const{ 
  vector<bool> visit(size,false);//vector initialized by default to false 
  stack<int> traverse;  
  bool search = false; //default to value not found

  visit[u] = true;  // mark as visited
  cout << label[u]; //print current location's label        
  traverse.push(u); //save location             

  while(!traverse.empty()) {
    // continue until all vertices have been visited
    search = false;

    for(size_t c = 0; c < visit.size() && !search; c++){

      if(adj_matrix[u][c] != 0 && !visit[c]){ 
	//when values is found, print the label, add it to list of visited locals, and mark as found
        cout << "->" << label[c];   
        visit[c] = true;
        traverse.push(c); 
	search = true;
        u = c; //continue on
  
      }

    }  
    
    if(search == false){
      u = traverse.top();
      traverse.pop();// pop from stack
    }
  
  } 

  cout << endl; //new line for legibility

 return;
}



//print the graph
void wdigraph::print_graph()const{
  cout << endl << "No of Nodes = " << size << endl; //header

  cout << endl << "Adjacency Matrix" << endl << endl; // header


  //print label
  cout << "  |";
  for(int t = 0; t < size; t++){
    cout << "  " << label[t];
  }
  cout << endl;


  //cosntruct weight factored graph
  cout << "--|";
  for(int f = 0; f < size; f++){
    cout << "---";
  }  
  cout << endl;



  for(int q = 0; q < size; q++){
    cout << label[q] << " |";
    for(int b = 0; b < size; b++){
      if(adj_matrix[q][b] != 0){
        cout << " " << setw(2) << right << adj_matrix[q][b];
      }
      else{
        cout << "  -";
      }
    }

      cout << endl;

      if(q != size - 1){
        cout << "  |" << endl;
      }
  }
  cout << endl;

 return;
}
